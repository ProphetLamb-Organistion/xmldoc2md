using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace XMLDoc2Markdown
{
    internal static class AssemblyExtensions
    {
        // Hash dumper source: https://gist.github.com/ProphetLamb/4fe035a943823310dec8404df408a39c
        private static readonly long[] s_msAssemblyNameHashes = new long[]
        {
            408031043, 450921459, 29161881, 317383918, 476042886, 403334477, 372459974, 959984052, 143709970, 602725550, 565626855, 36893726, 924507849, 14565575, 233182020, 820799898, 109399181, 131503280, 368378777, 533072626, 80463767, 19829129, 511790164, 125106116, 49574461, 293419892, 661771446, 179918902, 303714215, 911503421, 131724618, 450969639, 491340903, 775234561, 615287775, 471655230, 271850776, 819241926, 947812155, 866240118, 526910446, 407637939, 998207833, -24218821, 518726437, 442258563, -400742716, -7499274, 927315047, 176332918, 667409184, 757810939, 212707059, 100174662, 178953703, 722537855, 289972700, 580150113, 148632153, 343228216, 893227975, 94247868, 252252810, 862353472, 420639835, 121796722, 924116644, 212522470, 721260962, 714884185, 562897275, 409430438, 281347795, 221928599, 474795919, 804398806, 683815250, 102964381, 839997068, 459293985, 346761588, 593928362, 793446608, 547378044, 732443616, 503420410, 702938656, 718880346, 48483224, 429243833, 940739562, 829647159, 178232903, 462615566, 621274534, 518819343, 30315063, 824359850, 371750991, 644937072, 254210217, 521460082, 778751177, 635118632, 730263102, 624704381, 201529973, 683548998, 431920552, 888331048, 73396611, 622039725, 12979309, 773142879, 486641787, 783321551, 703939135, 583390046, 58772051, 424208083, 471618863, 859703003, -875885413, -5226166, 748997233, 613670229, 416124607, 41385552, 193357482, 880107100, 797297934, 266342701, 598619106, 944744614, 35129861, 164044492, -652531197, 712439307, 555187201, 624579157, 749763916, 316568852, 366335804, 491520563, 238720319, 186815144, 452432159, 571559434, 692060720, 538732000, 83696082, 202162311, 107788887, 737469744, 765220825, 144342624, 585482834, 170950164, 864333235, 954734990, 8391269, 485031899, 454157396, 98793024, 916165513, 526843218, 329297596, 812629369, 77607150, 574937069, 745246983, 903251925, 672532343, 520545433, 848676225, 973860984, 965007681, 717783621, 513867325, 461962150, 4686987, 340741199, 832389213, 250069686, 417415263, 132128173, 679519323, 666785984, 564939141, 599281968, 347653522, 806016276, 23705674, 636974923, 478719041, 116892902, 628388631, 240828806, 322158552, 116914578, 956760277, 740869063, 448043314, 204993797, 504373527, 527366493, 232189770, 377411441, 543349856, 328085396, 886383446, 246682217, 431288464, 639332015, 76588293, 457162214, 858056472, 502032585, 751747097, 458512429, 252905551, 859378609, 741634778, 565081970, 321492148, 816025231, 975519421, 81477497, 488562070, 771497466, 498145448, 816573539, 704238484, 866431314, 153007164, 676386315, 472822718, 521470778, 872220742, 182559886, 916036679, 309087537, 207678579, 385712786, 605965983, 333552229, 358369094, 76451044, 53541389, 36002154, 292886455, 199527465, 9885587, 623375384, 761536944, 757676002, 633989898, 45968029, 353067161, 681220187, 280627780, 361218542, 154528314, 474257279, 521963310, 673560673, 981199041, 113303145, 590295929, 238621143, 249763471, 282033090, 100005818, 598121343, 876578880, 153334581, 111854175, 715610601, 602986811, 633050530, 735023875, 559575260, 892034487, 312427602, 289693724, 208121687, 332513365, 522173453, 72424988, 983733591, 843859492, 467919901, 191764358, 949210196, 798680272, 854524469, 580281579, 673366858, 552623815, 955737095, 281674743, 789764594, 468551592, 526138487, 440830019, 786760603, 516157643, 952340342, 530501780, 537253643, 48513270, 294727778, 91313636, 545712971, 889812908, 779701678, 517643713, 167665773, 521245868, 681325045, 501357647, 461149874, 735216047, 138474917, 105540109, 653849163, 745655873, 940295783, 411611652, 475850583, 388999838, 716334589, 770513921, 415232641, 516545908, 579428066, 568160317, 832297242, 497221314, 553861997, 978732698, 202867509, 433435761, 98271587, 427737729, 368485040, 44081095, 478697785, 440470832, 134560067, 716911614, 402321771, 254731019, 895825001, 86903396, -137426065, 19285092, 138045464, 250973880, 105865525, 584579670, 458480204, 644645209, 148424711, 220945161, 150941992, 314963117, 902225868, 132339474, 620696617, 174954235, 995291958, 386772899, 928222877, 386711677, 181301709, 2799317, 368910575, 636219476, 240388190, 621726826, 862287626, 149946166, 884928706, 775568366, 798756910, 432039375, 822100944, 276424962, 389135155, 150783828, 58053447, 539022306, 656241773, 231285043, 135268455, 636235324, 239680104, 351420029, 416407606, 612046966, 892619385, 955269497, 524337068, 742610994, 935707123, 732331242, 463625279
        }.OrderBy(x => x).ToArray();

        internal static IEnumerable<string?> GetDeclaredNamespaces(this Assembly assembly)
        {
            return assembly.GetTypes().Select(type => type.Namespace).Distinct();
        }

        public static bool IsSystemAssembly(this Assembly assembly)
        {
            string? name = assembly.GetName().Name?.ToLowerInvariant();
            // Checking against typeof(string).Assembly is insufficient for many types e.g. PresentationCore types. Instead check that the assembly name hash against common microsoft assemblies from my GAC
            return name != null && Array.BinarySearch(s_msAssemblyNameHashes, CustomHash(name)) >= 0;
        }

        private static long CustomHash(ReadOnlySpan<char> value) {
            const int p = 31;
            const int m = (int)(1e9 + 9);
            const long a = 'a';
            long hashValue = 0;
            long pPow = 1;
            for (int i = 0; i < value.Length; i++)
            {
                hashValue = (hashValue + (value[i] - a + 1) * pPow) % m;
                pPow = (pPow * p) % m;
            }
            return hashValue;
        }
    }
}
